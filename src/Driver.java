import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * This class handles input and output for the program. It prompts for the
 * input filename with a scanner. Alternatively, the filename may be passed to
 * the program as a command line argument. The file is then passed into a
 * Scanner, which reads in the contents of the file.
 *
 * The input is a of list of integers, which it uses to construct a 2D array
 * representing an adjacency matrix. It then passes this matrix to the
 * WeightedGraph constructor, where it is used to build a weighted graph. If
 * the graph is feasible, the program prints out the following statistics
 * generated by the WeightedGraph class: topological ordering, early/late
 * stage and activity times, and the critical path. If the graph is not
 * feasible, an exception will be thrown, caught, and handled within the
 * WeightedGraph class.
 */
class Driver {

    // Program entry point
    public static void main(String[] args) throws IOException {
        System.out.printf("This program analyses a project, represented as an activity-on-edge digraph, and reports various statistics about the project.\n\n");
        Scanner sc = null;
        String file = "";

        try{
            if (args.length == 1) {
                file = args[0];
                sc = new Scanner(new File(file));
            } else {
                Scanner filename = new Scanner(System.in);
                System.out.printf("Please input a file: ");
                sc = new Scanner(new File(file = filename.nextLine()));
            }
        } catch (FileNotFoundException ex) {
            System.err.printf("%s", ex.getMessage());
            System.exit(1);
        }

        int stages = sc.nextInt();
        int[][] adjacencyMatrix = new int[stages][stages];

        // Build 2D array from input
        for (int i=0;i<stages;i++) {
            sc.nextInt();
            int adjStages = sc.nextInt();

            for (int j=0;j<adjStages;j++) adjacencyMatrix[i][sc.nextInt() - 1] = sc.nextInt();
        }

        WeightedGraph wg = new WeightedGraph(adjacencyMatrix);
        FileWriter fw = new FileWriter(file + ".rpt.txt", false);
        if (!wg.isFeasible()) {
            fw.write("Project is infeasible.");
            fw.close();
            System.exit(1);
        } else {
            int[] est = wg.getEST();
            int[] eat = wg.getEAT();
            List<Integer> critical = new ArrayList<>();
            fw.write(String.format("Project is feasible.\nTopological ordering: %s\n\nStg.\tEarly\tLate\n", wg.getTopOrder()));
            for (int k=0;k<est.length;k++) fw.write(String.format("%d\t%d\t%d\n", k+1,est[k], wg.getLST()[k]));

            fw.write(String.format("Total project time: %d\n\nAct.\tEarly\tLate\n", est[est.length - 1]));
            fw.write("");

            for (int l=0;l<eat.length;l++) {
                fw.write(String.format("%d\t%d\t%d\n", l + 1, eat[l], wg.getLAT()[l]));
                if (eat[l] == wg.getLAT()[l]) critical.add(l+1);
            }
            fw.write(String.format("\nCritical activities: %s", critical.toString()));
        }
        fw.close();
        System.out.printf("\nFinished. Report written to: %s\n", file + ".rpt.txt");
    }
}
